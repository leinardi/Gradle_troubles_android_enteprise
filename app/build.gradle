apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../jacoco-unit-tests.gradle'

android {
    adbOptions {
        timeOutInMs 120 * 1000 // 120 seconds
    }
    compileOptions {
        sourceCompatibility versions.android.javaVersion
        targetCompatibility versions.android.javaVersion
    }



    compileSdkVersion versions.android.compileSdk
    buildToolsVersion versions.android.buildTools

    dataBinding {
        enabled = true
    }

    dexOptions {
        jumboMode true
        //attempt to use the build cache
//        preDexLibraries preDexEnabled
        javaMaxHeapSize "4g"
        maxProcessCount = 8
    }
    defaultConfig {
        applicationId "firebase.trouble.setby.gradle"
        versionCode appVersionCode

        minSdkVersion versions.android.minSdk
        targetSdkVersion versions.android.targetSdk
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "BUILD_REVISION", "\"${revision}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "boolean", "IS_PRODUCTION", "${isProduction}"
        buildConfigField "boolean", "IS_BETA", "${isBeta}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        testInstrumentationRunner "espresso.fail.multidex.CustomJunitRunner"

        testInstrumentationRunnerArguments clearPackageData: 'true'

        multiDexEnabled true
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
    }

    buildTypes {

        debug {
//            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro', '../proguardRules/proguard-debug-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-debug-test-rules.pro'
            testCoverageEnabled false
            multiDexKeepProguard file('../proguardRules/multidex-proguard.pro')
        }
        release {
            minifyEnabled true
            shrinkResources true
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-debug-test-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguardRules/proguard-rules.pro'
        }
    }

    // country flavor overrides pay flavor which overrides defaultConfig
    // keep the order exactly like this!
    flavorDimensions 'pay', 'country'

    // not all product flavor combinations are valid, we're ignoring a couple, see below
    productFlavors {
        pay {
            dimension 'pay'
        }
        global {
            dimension 'pay'
        }
        austria {
            dimension 'country'
            signingConfig signingConfigs.debug
            applicationId "firebase.trouble.setby.gradle"
            versionName "AT"
            resConfigs "at"
            //FIXME firebase google_app_id
//            resValue "string", "google_app_id", "1:1093394223259:android:135c9bbacc945e22"
        }
        germany {
            dimension 'country'
            signingConfig signingConfigs.debug
            applicationId "de.companyname.client.android"
            versionCode 1
            versionName appVersionNameDE
            resConfigs "de"
        }
    }

    lintOptions {
        checkAllWarnings false
        warningsAsErrors false
        checkReleaseBuilds false
        disable 'LogNotTimber', 'StringFormatInTimber', 'ThrowableNotAtBeginning', 'BinaryOperationInTimber', 'TimberArgCount', 'TimberArgTypes', 'TimberTagLength'
        abortOnError true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def apiLevel = versions.android.minSdk
            def FLAVOR_DIMENSION_SIZE = 2
            for (int i = 0; i < FLAVOR_DIMENSION_SIZE; i++) {
                if (variant.productFlavors.get(i).minSdkVersion != null) {
                    apiLevel = variant.productFlavors[i].minSdkVersion.apiLevel
                }
            }
            outputFileName = ("COMPANY_" + variant.productFlavors.get(0).name + "_"
                    + variant.productFlavors.get(1).name + "_"
                    + "api" + apiLevel + "_"
                    + variant.buildType.name + "_"
                    + (isProduction.toBoolean() ? "prod_" : "")
                    + (sendExternalPartners.toBoolean() ? "extpartner_" : "")
                    + (isBeta.toBoolean() ? "beta_" : "")
                    + variant.mergedFlavor.versionName + "-"
                    + variant.mergedFlavor.versionCode + "-"
                    + "${revision}.apk")
        }
    }

    // ignore impossible variants
    variantFilter { variant ->
        if (variant.getFlavors().get(0).name == 'pay' &&
                !variant.getFlavors().get(1).name.startsWith("germany")) {
            variant.setIgnore(true);
        }
        if (variant.getFlavors().get(0).name == 'nonpay' &&
                variant.getFlavors().get(1).name.startsWith("germany")) {
            variant.setIgnore(true);
        }
    }

    packagingOptions {
        exclude "META-INF/MANIFEST.MF"
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude '.readme'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/rxjava.properties' //https://github.com/ReactiveX/RxJava/issues/4445
    }

}

// ------------------------------------------------------------------------------------------

dependencies {
    kapt "com.github.bumptech.glide:compiler:${versions.libs.glide}"
    kapt "com.jakewharton:butterknife-compiler:${versions.libs.butterknife}"
    kapt "android.arch.lifecycle:compiler:${versions.libs.androidArchitecture}"
    implementation "com.google.dagger:dagger-android-support:${versions.libs.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.libs.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.libs.dagger}"
    implementation project(':Core')

    implementation "android.arch.lifecycle:extensions:$versions.libs.androidArchitecture"
    implementation "android.arch.lifecycle:reactivestreams:$versions.libs.androidArchitecture"
    implementation "android.arch.persistence.room:runtime:$versions.libs.androidRoom"
    kapt "android.arch.persistence.room:compiler:$versions.libs.androidRoom"
    implementation "android.arch.persistence.room:rxjava2:$versions.libs.androidRoom"
    implementation "com.commonsware.cwac:saferoom:${versions.libs.saferoom}"

    //noinspection GradleDependency
    germanyImplementation "net.zetetic:android-database-sqlcipher:${versions.libs.sqlCipher}@aar"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.libs.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.libs.leakcanary}"

    implementation "com.google.firebase:firebase-config:${versions.libs.firebase}"
    implementation "com.google.firebase:firebase-messaging:${versions.libs.firebase}"
    implementation "com.google.firebase:firebase-core:${versions.libs.firebase}"
    implementation "com.google.firebase:firebase-analytics:${versions.libs.firebase}"

    implementation "com.google.android.gms:play-services-location:${versions.libs.playServices}"
    implementation "com.google.android.gms:play-services-analytics:15.0.2"
    implementation "com.google.android.gms:play-services-location:${versions.libs.playServices}"
    implementation "com.google.android.gms:play-services-maps:${versions.libs.playServices}"

    implementation "com.android.support:support-v4:${versions.libs.support}"
    implementation "com.android.support:design:${versions.libs.support}"
    implementation "com.android.support:customtabs:${versions.libs.support}"
    implementation "com.android.support:appcompat-v7:${versions.libs.support}"
    implementation "com.getkeepsafe.taptargetview:taptargetview:${versions.libs.taptargetview}"
    implementation "com.android.support:support-annotations:${versions.libs.support}"
    implementation "com.android.support:gridlayout-v7:${versions.libs.support}"
    implementation "android.arch.lifecycle:runtime:${versions.libs.androidArchitecture}"
    implementation "android.arch.lifecycle:extensions:${versions.libs.androidArchitecture}"
    implementation "com.android.support:recyclerview-v7:${versions.libs.support}"
    implementation "com.android.support:cardview-v7:${versions.libs.support}"
    implementation "com.android.support:support-emoji-appcompat:${versions.libs.support}"
    implementation "com.android.support:support-emoji-bundled:${versions.libs.support}"
    implementation "com.android.support:multidex:${versions.libs.multidex}"
    implementation "com.android.support.constraint:constraint-layout:${versions.libs.constraintLayout}"
    implementation "com.google.maps.android:android-maps-utils:${versions.libs.androidMapsUtils}"

    //architecture
    implementation "io.reactivex.rxjava2:rxjava:${versions.libs.rxjava2}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.libs.rxandroid2}"
    implementation "com.jakewharton.rxbinding2:rxbinding:${versions.libs.rxbinding}"
    implementation "net.danlew:android.joda:${versions.libs.joda}"
    implementation "org.joda:joda-convert:${versions.libs.jodaConvert}"
    implementation "com.jakewharton:butterknife:${versions.libs.butterknife}"
    implementation("com.crashlytics.sdk.android:crashlytics:${versions.libs.crashlytics}@aar") {
        transitive = true
    }
    implementation('com.crashlytics.sdk.android:answers:1.4.1@aar') {
        transitive = true
    }
    implementation "com.squareup.retrofit2:retrofit:${versions.libs.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.libs.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.libs.retrofit}"
    implementation "com.google.code.gson:gson:${versions.libs.gson}"
    implementation "com.squareup.okhttp3:okhttp:${versions.libs.okhttp3}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.libs.okhttp3}"

    //noinspection GradleDependency
    implementation "com.facebook.conceal:conceal:${versions.libs.conceal}@aar"
    implementation "com.google.zxing:core:${versions.libs.zxing}"
    implementation "com.google.zxing:android-integration:${versions.libs.zxing}"
    implementation "com.jakewharton.timber:timber:${versions.libs.timber}"
    implementation "com.github.bumptech.glide:glide:${versions.libs.glide}"
    implementation "com.github.bumptech.glide:okhttp3-integration:${versions.libs.glide}@aar"
    implementation "com.github.jinatonic.confetti:confetti:${versions.libs.confetti}"
    implementation "com.googlecode.libphonenumber:libphonenumber:${versions.libs.libphonenumber}"
    implementation "org.apache.commons:commons-collections4:${versions.libs.commonsCollections4}"

    //UI helper libs
    implementation "com.romandanylyk:pageindicatorview:${versions.libs.pageindicatorview}@aar"
    implementation("eu.inmite.android.lib:android-validation-komensky:${versions.libs.validationKomensky}") {
        exclude group: 'com.google.android', module: 'support-v4'
    }
    implementation("com.leinardi.android:speed-dial:${versions.libs.speedDial}")

    //todo deprecated remove/open mob ticket
    implementation("eu.inmite.android.lib:android-validation-komensky:${versions.libs.validationKomensky}") {
        exclude group: 'com.google.android', module: 'support-v4'
    }
    implementation "com.daimajia.easing:library:${versions.libs.easing}@aar"
    implementation "com.daimajia.androidanimations:library:${versions.libs.androidanimations}@aar"
    implementation "me.zhanghai.android.materialprogressbar:library:${versions.libs.materialprogressbar}"

    // tracking
    implementation "com.airbnb.android:lottie:${versions.libs.lottie}"

    //unit test needed libraries
    testImplementation "com.google.dagger:dagger-android-support:${versions.libs.dagger}"
    kaptTest "com.google.dagger:dagger-compiler:${versions.libs.dagger}"
    kaptTest "com.google.dagger:dagger-android-processor:${versions.libs.dagger}"
    testImplementation "com.android.support:support-annotations:${versions.libs.support}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.libs.leakcanary}"
    testImplementation "junit:junit:${versions.libs.junit}"
    testImplementation "net.danlew:android.joda:${versions.libs.joda}"
    testImplementation "joda-time:joda-time:${versions.libs.joda}"
    testImplementation "org.joda:joda-convert:${versions.libs.jodaConvert}"
    testImplementation "de.greenrobot:eventbus:${versions.libs.eventbus}"
    testImplementation "org.mockito:mockito-core:${versions.libs.mockito}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.libs.okhttp3}"
    testImplementation "android.arch.core:core-testing:$versions.libs.androidArchitecture"
    testImplementation "android.arch.persistence.room:testing:$versions.libs.androidRoom"

    //noinspection GradleDependency
    testGermanyImplementation "net.zetetic:android-database-sqlcipher:${versions.libs.sqlCipher}@aar"

    //espresso test needed libraries
    androidTestImplementation "android.arch.core:core-testing:$versions.libs.androidArchitecture"
    androidTestImplementation "android.arch.persistence.room:testing:$versions.libs.androidRoom"
    androidTestImplementation "com.google.dagger:dagger:${versions.libs.dagger}"
    androidTestImplementation "com.google.dagger:dagger-android-support:${versions.libs.dagger}"
    kaptAndroidTest "com.google.dagger:dagger-compiler:${versions.libs.dagger}"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:${versions.libs.dagger}"
    androidTestImplementation "io.reactivex.rxjava2:rxjava:${versions.libs.rxjava2}"
    androidTestImplementation "io.reactivex.rxjava2:rxandroid:${versions.libs.rxandroid2}"

    //noinspection GradleDependency
    androidTestGermanyImplementation "net.zetetic:android-database-sqlcipher:${versions.libs.sqlCipher}@aar"
    androidTestImplementation "com.google.code.gson:gson:${versions.libs.gson}"
    androidTestImplementation "junit:junit:${versions.libs.junit}"
    androidTestImplementation "com.squareup.retrofit2:retrofit:${versions.libs.retrofit}"
    androidTestImplementation "com.squareup.retrofit2:converter-gson:${versions.libs.retrofit}"
    androidTestImplementation "com.squareup.retrofit2:adapter-rxjava2:${versions.libs.retrofit}"
    androidTestImplementation "com.android.support:support-annotations:${versions.libs.support}"
    androidTestImplementation "io.reactivex.rxjava2:rxjava:${versions.libs.rxjava2}"
    androidTestImplementation "de.greenrobot:eventbus:${versions.libs.eventbus}"
    androidTestImplementation "org.mockito:mockito-core:${versions.libs.mockito}"
    androidTestImplementation "junit:junit:${versions.libs.junit}"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker:${versions.libs.dexmaker}"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:${versions.libs.dexmaker}"
    androidTestImplementation "net.danlew:android.joda:${versions.libs.joda}"
    androidTestImplementation "org.joda:joda-convert:${versions.libs.jodaConvert}"
    androidTestImplementation "com.google.zxing:core:${versions.libs.zxing}"
    androidTestImplementation "com.google.zxing:android-integration:${versions.libs.zxing}"

    //noinspection GradleDependency
    androidTestImplementation "com.facebook.conceal:conceal:${versions.libs.conceal}@aar"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${versions.libs.okhttp3}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${versions.libs.espressoVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${versions.libs.espressoVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${versions.libs.espressoVersion}"
    androidTestImplementation "com.android.support.test:rules:${versions.libs.espressoRunner}"
    androidTestImplementation "com.android.support.test.espresso:espresso-web:${versions.libs.espressoVersion}"
    androidTestImplementation "com.android.support.test:runner:${versions.libs.espressoRunner}"
    androidTestUtil "com.android.support.test:orchestrator:1.0.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation 'com.squareup.spoon:spoon-client:2.0.0-SNAPSHOT'
//    androidTestImplementation(name: 'cloudtestingscreenshotter_lib', ext: 'aar')
}

// -------------
import org.gradle.internal.os.OperatingSystem

def addVersionInformation(country, String appVersionName, int appVersionCode) {
    File file = new File(rootProject.projectDir, "app/release_docs/release_notes_${country}.txt")
    file.delete()
    file.createNewFile()
    String releaseType = System.getenv("RELEASE_TYPE")
    if (sendExternalPartners.toBoolean()) {
        file.append("--- PARTNERS RELEASE CANDIDATE ---\n")
    } else if (releaseType.equals("Production")) {
        file.append("--- RELEASE CANDIDATE ---\n")
    } else if (releaseType.equals("Alpha") || releaseType.equals("Beta")) {
        file.append("--- " + releaseType.toUpperCase() + " ---\n")
    }
    file.append("${appVersionName}-${appVersionCode}-${revision}")
    file.append("\n")

    if (!OperatingSystem.current().isWindows()) {
        def p = ['/bin/bash', '-c', /git branch | grep -v "detached" | grep \* | cut -d ' ' -f2/].execute()
        p.waitFor()
        String branch = p.text.trim()
        if (branch.isEmpty()) {
            branch = System.getenv("BRANCH_NAME")
        }
        if (branch != null) {
            file.append("\nBranch: " + branch)
        } else {
            file.append("\nUnknown branch")
        }
    }
    if (System.getenv("JOB_NAME") != null) {
        file.append("\nJob: " + System.getenv("JOB_NAME"))
    } else {
        file.append("\nJob: <local gradle build>")
    }
    if (System.getenv("BUILD_USER") != null && !isProduction) {
        file.append("\nStarted by: " + System.getenv("BUILD_USER"))
    }
    file.append("\n")
    file.append("\nsendExternalPartners: ${sendExternalPartners}")
    file.append("\nisBeta: ${isBeta}")
    file.append("\nisProduction: ${isProduction}")

    if (System.getenv("CHANGELOG") != null) {
        file.append("\n\nChangelog: " + System.getenv("CHANGELOG"))
    }
    return file
}

//----------------------------Espresso permissions grant--------------------------------------
android.applicationVariants.all { variant ->
    def applicationId = variant.applicationId
    def adb = android.getAdbExe().toString()
    def variantName = variant.name.capitalize()
    def grantPermissionTask = tasks.create("grant${variantName}Permissions") << {
        "${adb} devices".execute().text.eachLine {
            if (it.endsWith("device")) {
                def device = it.split()[0]
                println "Granting permissions on devices ${device}"
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_FINE_LOCATION".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WAKE_LOCK".execute()
            }
        }
    }
}

task(info) << {
    logging.captureStandardOutput LogLevel.LIFECYCLE
    println ">>> I am " + (isJenkins ? "" : "NOT ") + "running on Jenkins and do " + (isProduction ? "" : "NOT ") + "create a production release <<<"
}
preBuild.dependsOn += info
